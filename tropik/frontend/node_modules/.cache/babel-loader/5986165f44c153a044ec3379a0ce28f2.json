{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/myprojects/tropik/frontend/src/Components/Serveur/GClients.jsx\";\nimport React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport AdminNavigation from './AdminNavigation';\n\nclass GClients extends Component {\n  componentDidMount() {\n    axios.get(\"http://localhost/myprojects/tropik/backend/Clients/get\").then(res => res.data).then(state => this.props.fetchTableClients(state)).catch(err => console.log(\"error parsing:\\n\", err));\n  }\n\n  render() {\n    const _this$props$states = this.props.states,\n          columns = _this$props$states.columns,\n          data = _this$props$states.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(AdminNavigation, {\n      history: this.props.history,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }), React.createElement(MaterialTable, {\n      style: {\n        width: '100%'\n      },\n      title: \"GESTION CLIENTS\",\n      columns: columns,\n      data: data,\n      editable: {\n        onRowAdd: newData => new Promise(resolve => {\n          setTimeout(() => {\n            resolve();\n            this.props.addTableClients(newData);\n          }, 600);\n        }),\n        onRowUpdate: (newData, oldData) => new Promise(resolve => {\n          setTimeout(() => {\n            resolve();\n            this.props.updateTableClients(newData, oldData);\n          }, 600);\n        }),\n        onRowDelete: oldData => new Promise(resolve => {\n          setTimeout(() => {\n            resolve();\n            this.props.deleteTableClients(oldData);\n          }, 600);\n        })\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    states: state.tablesClients\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTableClients: data => {\n      dispatch({\n        type: \"ADD_TABLE_CLIENTS\",\n        data: data\n      });\n    },\n    deleteTableClients: oldData => {\n      dispatch({\n        type: \"DELETE_TABLE_CLIENTS\",\n        oldData: oldData\n      });\n    },\n    updateTableClients: (newData, oldData) => {\n      dispatch({\n        type: \"UPDATE_TABLE_CLIENTS\",\n        newData: newData,\n        oldData: oldData\n      });\n    },\n    fetchTableClients: data => {\n      dispatch({\n        type: \"FETCH_TABLE_CLIENTS\",\n        data: data\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GClients);","map":{"version":3,"sources":["/opt/lampp/htdocs/myprojects/tropik/frontend/src/Components/Serveur/GClients.jsx"],"names":["React","Component","MaterialTable","connect","axios","AdminNavigation","GClients","componentDidMount","get","then","res","data","state","props","fetchTableClients","catch","err","console","log","render","states","columns","history","width","onRowAdd","newData","Promise","resolve","setTimeout","addTableClients","onRowUpdate","oldData","updateTableClients","onRowDelete","deleteTableClients","mapStateToProps","tablesClients","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport MaterialTable from 'material-table';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\nimport AdminNavigation from './AdminNavigation';\n\nclass GClients extends Component {\n  componentDidMount() {\n    axios.get(\"http://localhost/myprojects/tropik/backend/Clients/get\").then(res => res.data).then(state => this.props.fetchTableClients(state)).catch(err => console.log(\"error parsing:\\n\", err));\n  }\n  render() {\n    const {columns, data} = this.props.states;\n    return (<div>\n      <AdminNavigation  history={this.props.history}/>\n      <MaterialTable style={{width: '100%'}} title=\"GESTION CLIENTS\" columns={columns} data={data} editable={{\n          onRowAdd: newData => new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              this.props.addTableClients(newData);\n            }, 600);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              this.props.updateTableClients(newData, oldData);\n            }, 600);\n          }),\n          onRowDelete: oldData => new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              this.props.deleteTableClients(oldData);\n            }, 600);\n          })\n        }}/>\n    </div>);\n  }\n}\n\nconst mapStateToProps = state => {\n  return {states: state.tablesClients}\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTableClients: (data) => {\n      dispatch({type: \"ADD_TABLE_CLIENTS\", data: data});\n    },\n    deleteTableClients: (oldData) => {\n      dispatch({type: \"DELETE_TABLE_CLIENTS\", oldData: oldData});\n    },\n    updateTableClients: (newData, oldData) => {\n      dispatch({type: \"UPDATE_TABLE_CLIENTS\", newData: newData, oldData: oldData});\n    },\n    fetchTableClients: (data) => {\n      dispatch({type: \"FETCH_TABLE_CLIENTS\", data: data});\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GClients);\n"]},"metadata":{},"sourceType":"module"}